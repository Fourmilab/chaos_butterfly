
                    Fourmilab Chaos Butterfly

                        Development Log


2022 September 26

Added Set variables for all Lorentz parameters: beta, rho, sigma, and
deltaT.  These may be either floats or rationals, and if the value is
omitted, resets the variable to the default.

Added Set variable for scale.

Added all new variables to the Status output.  Added running and
attached to Status, and show to whom we're attached if so.

Replaced the original Test/Quit command structure with a:
    Run on/off/time/async
command as in Double Pendulum.

Added the:
    Set path on/off/lines [ permanent/clear ]
mechanism from Double Pendulum.  I found that the same 12 line plotter
scripts we used in that object seem to keep up and avoid message loss
here.

Added a Set path width n command to set the width of paths, both
particle and line.  Note that particle width cannot be set below
0.3125 and line width will be snapped to the closest of the values
supported by the line plotters: 0.01, 0.015, 0.02, 0.025.  Thus, you'll
want to tune this setting based upon the kind of path you're going to
draw.

Installed the link message code to support scripts and menus.

Installed a "Script: Configuration" to test script execution.

2022 September 27

A great many things were messed up regarding drawing lines for trails.
First of all, the scripts for permanent and temporary line prims had
different tables for widths, resulting in absurdly fat lines when
permanent prims were selected.  The temporary prim script lacked the
code to set PRIM_TEMP_ON_REZ based upon its name, and hence required a
hard temporary setting in the prim definition, resulting in the
"peekaboo prim" problem when editing it.  Finally, the temporary prim's
script was from the Orbits literary output and lacked all comments.  As
fixed, the two scripts are now absolutely identical and determine their
permanence from their names.

Added the ability to plot critical points, depending upon the current
parameters, with:
    Set critical [ permanent ]
This draws axes gnomons at the critical points.  These are usually
temporary prims, but you can make them permanent by so specifying.
They will be cleared by Set path line clear.

On further reflection, changed the drawing of critical point gnomons
to use the colours of the viewer labeling of axes: X red, Y green, Z
blue.

Added "Set path colour <r,g,b>" to set the colour of both particle and
line paths.

Licensed a collection of nine butterfly textures from:
    https://www.shutterstock.com/image-vector/collection-multicolored-butterflies-vector-illustration-1912569607
These are EPS vector images which I converted into PNGs with
transparency using Gimp to import the EPS at 300 dpi, then cropped,
scaled, and added transparency.  I may see if I can find some natural
photos of real butterflies to add as well.

Added a "Set offset <x,y,z>" command to set the offset from the initial
position of the butterfly to where it begins flight.  This is usually
used to raise the flight display so it doesn't intersect the ground,
but you can set it however you wish.

There is a mystery when attached to an avatar.  If you perform a run,
then stop, and then run again, sometimes, but not always, the avatar
just remains stuck at the starting position.  Trace shows the
llMoveToTarget calls are being made to correct locations, the avatar is
physical, and that everything seems normal, but the avatar doesn't
move.  If you then use the viewer button to stop flying, suddenly the
avatar starts moving normally, but with the "falling" animation.  If
you then put the avatar back in flying mode, everything is fine again.
I have tried forcing a llStopMoveToTarget(), delays, etc., but nothing
so far has made any difference once you get in this stuck mode.  The
only way to escape seems to be the manual stop flying while you're
stuck.  I have no idea what is going on.

Added a "Set texture name" command which replaces the butterfly texture
with the named one in the inventory.  These texture names must be all
lower case and contain no spaces, since I don't want to bring in the
big and messy inventoryName function we use elsewhere.  If no name is
specified, textures in the inventory are listed.

2022 September 28

Installed an automatic scaling mechanism so that the hue range of
trails in polychrome mode accurately reflects the extreme excursion
based upon the current parameters.  Whenever a run is started or any
of the parameters change, updateScale() is called which performs
1000 iterations and records the maximum excursion from the closest
critical point by the trajectory.  This is stored in maxExcursion,
which is used to scale the hue in which the trail is drawn.

Changed the Run on command to start the simulation at a randomly
chosen point between 1/6 and 1/5 along a vector connecting critical
points 1 and 2.

Added the ability to texture with top and bottom butterfly images.
The "Set texture" command now looks for a companion image with the
specified name and "-bottom" appended.  If found, that image is placed
on the bottom of the butterfly prim.

Made a top and bottom set for "butterfly10" from the Wikimedia image of
Morpho menelaus, which is licensed under Creative Commons
Attribution-Share Alike 4.0 International license.
    https://en.wikipedia.org/wiki/File:Morpho_menelaus_huebneri_MHNT_Male.jpg

2022 September 29

After many hours of experimentation, I am getting a few glimmers of
enlightenment on why particle trails do not align with critical point
gnomons when we're attached to an avatar.  The key clue is that line
trails, which are placed based upon the transformed Lorenz co-ordinates
work just fine.  What's happening with particles is, in short, that
we're moving the avatar to follow the trajectory which causes it to
move its centre of mass (the hip bone) to the position we specify.
But the attachment is to another bone (usually the chest), and this
not only has an offset from the avatar position, that offset varies as
the avatar moves.  To correct for this offset, we would need to get the
real-time offset from the avatar position to the attachment position,
and I can't find any way to do this.

We may just have to live with this.  If you want trails that align with
the Set crit points while attached, use Set path lines.  Otherwise,
it's going to be wonky.

Another infelicitous behaviour of particle trails is that since the
particle emitter in the butterfly is offset from the avatar's centre,
when the avatar turns, you will get a discontinuity in the trail.  The
only way to keep that from happening would be to make a two prim
butterfly in which there was a prim to be attached to the avatar centre
but transparent, to hold the particle emitter, and another, visible, to
actually do the work.  I find it difficult to justify all of this
complexity to remedy a minor cosmetic problem which I suspect few
people will ever encounter since most won't ever wear the butterfly as
an attachment in the first place.

Added a general lorenz2Region() function to transform Lorenz
co-ordinates to region co-ordinates rather than writing it out in three
places.  Added logic to the function to rotate by the rotation of the
object at the time the Run started, allowing control of the orientation
of the trails in region space.  Made the restoration of starting point
at Run off also restore the initial rotation rather than resetting to a
fixed value.  This applies also when attached to an avatar.  The path
flown in the sky will depend upon the initial rotation of the flying
avatar at the time of the "Run on".

Made a texture, top and bottom, of the Millennium Falcon from:
    https://www.the-millennium-falcon.com/2018/03/12/done/
It isn't just butterflies any more!

When you started in paths mode, you'd often get a particle trail from
the start point to the first computed point on the trajectory even
though the particle system was only enabled after the move to the start
of the trajectory.  This appears to be because we used
llSetLinkPrimitiveParamsFast() for the move and it was too fast--the
viewer enabled the particle system before it got the command to start
the move.  I added a 0.2 second llSleep() after the initial move before
enabling the particle system and that appears to have fixed it.

2022 September 30

Added a plotLine() function to assemble and send the request to a Line
plotter to draw a line in space and replaced all of the written-out
instances of this code with a call to the function.

If the user tried to "Set critical" before a Run was started, the
critical points would be drawn in the wrong place because the initial
position and rotation of the object had not been captured.  Trying to
obtain them in the Set critical command could mess things up when the
command was issued while running, so I simply added a test to reject
the command except when a simulation was running.

2022 October 1

To allow different levels of trace information, I added the ability
to "Set trace n" which sets it to the given value.  The "on" setting
corresponds to n = 1.

Completed the grand revision of the code to rationalise the orientation
of the model as it moves along its trajectory.  This is done in the
timer() event after we've computed the next point in the Lorenz
trajectory.  First, we form the vector from the previous point to the
new point, normalise it, and call it flight.  We define a vector look
which is the normalised direction from the new point to the closest of
the two critical points of the Lorenz system.  We then compute, using
our local flRotBetween(), the rotation vdir to align the local Z axis
of the model with the flight vector, which will, given the shape of our
model and its texture, make it fly along the path from the previous to
the current point.  This process, however, leaves the rotation around
this local Z axis as a free parameter, and it comes out essentially
arbitrary, which results in wild and apparently random (although, of
course, entirely deterministic) gyrations as the model moves along its
trajectory.

That won't do.  So, what we do is then proceed to rotate the model
around its local Z axis so that its top [defined by the side we've so
textured, which is llRot2Up(vdir)].  Next, we want to project the look
vector into the plane in which we're going to rotate the model to align
it, which is:
    lproj = look - ((look . up) * up)
Now, we need to compute the rotation about the Z axis to align the top
of the model with this projected vector, which is the arc cosine of
lproj dot left.  But, since this is a dot product, it only tells us the
angle between the two vectors, not the direction in which we need to
rotate to align them.  So next we compute the cross product of up and
lproj, which gives the normal of the direction of travel and projected
direction to the critical point, and then take the dot product of that
with the left vector.  The sign of this dot product indicates whether
the projection of the vectors are parallel or antiparallel, and hence
the direction we need to rotate to align them. Finally, we rotate vdir
by the computed rotation in the direction indicated by the sign, and
we're there: the model will point along the direction of travel with
its top aligned with a vector from its new position to the closest
critical point.

Now, wasn't that simple?  It's crazy to do, but it looks great and it
minimises the vertigo-inducing effects of an over the shoulder or
mouselook view when an avatar is riding the model.

Created a Git repository and made an initial commit of the current
state of development, including scripts, textures, notecards, and this
log.

2022 October 2

Made the first rough cut at a deployer, based upon the SAM Site
deployer for the Rocket, which simplifies placing multiple butterfiles
in a vicinity to create a cloud of non-interacting butterflies.  The
deployer places them and then they are subsequently controlled by chat
commands sent to their common channel, which is 1000 greater than the
default channel for the stand-alone model.  When rezzed by the
deployer, the model will respond to a special command sent by the
deployer which causes it to self-destruct with llDie() when the
deployer receives the "Remove" command.  This allows easy clean-up of
created models.

There are myriad features and tweaks that could, and doubtless will, be
added to the deployer and to the model to work better with it, but it's
basically working and allows evaluation of its behaviour in order to
decide where we want to take it.

The Set path command may be trying to do too many things to be
comprehensible to the user, no less to the humble programmer charged
with implementing it.  I fixed a bunch of bugs in it without, for the
moment, undertaking a redesign or splitting it into two or more
commands.  The Set path lines command now turns off generation of
particle paths, and the Set path lines command now clears existing
lines without affecting the generation of either line or particle
paths.

The "Run on" command caused butterflies to quit almost instantly
because it misinterpreted "on" as a run expiration time due to a bad
test when I changed it to use flIsDigit().  Fixed.

Added code to allow the Deployer to set the texture used by the
butterflies it creates.  It passes a texture number from the Deploy
command via the on_rez() start_param argument, where the number
corresponds to the numbers show by the "Set texture" command in the
butterfly model being deployed.  (The llRezObject() function can pass
only one 32-bit integer to the object being created.)  A texture number
of zero causes the butterfly to chose its texture based upon its
instance number from the deployer modulo the number of textures in its
inventory. In doing this, "-bottom" textures are ignored.

Added a test which restricts the magic command the Deployer sends to
butterflies to cause them to self-destruct to only responding if the
command was sent by the Deployer that created the butterfly.  This
prevents malicious sending of this command by others or butterflies
being destroyed by a different Deployer in the same region.

Added a "Set start min [ max ]" command to specify a range of
percentages of the distance between the critical points from which the
starting point will be chosen by the Run command.  If only one number
is given, that value will always be used.  You can specify negative
percentages and percentages greater than 100 if you wish points outside
the limits of the critical points.  Note that if you specify 0 or 100
exactly (the critical points), the butterfly will remain stuck there as
those are fixed points for the system.

To run sensitive dependence on initial conditions experiment:
    Rez two butterflies near one another.
    Edit the Configuration script in 1 and add:
        Channel 4001
    Edit the Configuration script in 2 and add:
        Channel 4002
    Edit objects and move 1 and 2 to the same position.
    /1963 boot
    /4001 set texture butterfly2
    /4002 set texture butterfly3
    # Start experiment run
    /4001 set start 20
    /4002 set start 20.000001
    /4002 channel 4001
    /4001 run on
    # When done
    /4001 run off
    /4001 boot
You can now run the experiment again, starting with setting the
"Set start" commands with whatever settings you want to try.

If you start from identical start points, after a while one of the
butterflies may get ahead of the other, but they will both continue to
follow the same trajectories.  The position discrepancy is because
each butterfly has its own update clock and lag in the Second Life
simulator causes them to drift apart over long periods of time even
though they are set to the same rate.  If the start points differ even
by a tiny amount, however, the paths will rapidly diverse and before
long the butterflies will be circling different critical points.

2022 October 3

Now that we properly align the local Z axis of the object with our
direction of travel at all times, I decided to see if using
PSYS_PART_RIBBON_MASK for the particle trail definition worked better.
It does: it's still a bit wonky, especially when we're moving quickly
or turning tight corners, but I think it's better, overall, than the
disconnected dots we had been using.  Getting it to display properly
requires increasing pathWidth to 0.75, which will cause Set path lines
to use the maximum width of 0.025.  Since I intended to make that the
default anyway, this is fine.

Added a Boot command to the Deployer for consistency with other
Fourmilab products.

Added logic in butterfly on_rez() to append ": n" to the object name
if we were rezzed by the deployer, where n is the deployer index of the
object.  If the name previously contained the suffix, it is deleted
before the new name is generated.

Added a List command to support the Deployer's List feature.  It simply
reports its position and Run status, counting on the viewer to report
its object name, which will contain the deployer index.  Getting this
through the access check and getting the output back to the deployer
owner is a spot of bother.  By default, tawk() would send the output
back to the deployer itself, which would ignore it.  I modified
processCommand to, if it detects the command was sent from the
Deployer, set whoDat to the owner of the deployer, directing the output
correctly. The usual access check on the ID who sent the command is
skipped if we were rezzed by a deployer and the command sender's ID is
that of our deployer.

Added a Status command to the Deployer.  People expect it, even though
it doesn't tell you much of interest.

Changed the Deployer's command channel to the production value of 1977.
This is the year modern commercial butterfly breeding began on
Guernsey.

2022 October 4

Completed first draft of the Chaos Butterfly User Guide.  This includes
instructions for the Deployer.

2022 October 5

Made images for the Marketplace listing.

2022 October 6

When making the textures for the butterflies, I originally flooded the
space around the image with red pixels and then used Gimp's colour to
alpha feature to make the background transparent.  This left the pixels
with RGB(1, 0, 0) channels and Alpha 0.  While this looks fine in GIMP,
it confuses the renderer in Second Life viewers when scaling down the
texture to lower resolutions, causing "leakage" of red into the edges
of the image, creating a messy red "halo" around the texture.  I remade
all of the vector butterfly textures to change the background to black
transparent pixels to get rid of the halos.

2022 October 7

Tried to make an animated GIF for the Marketplace, but it is basically
hopeless.  With the complexity of frames needed to show paths, the
file size blows up to much that only a clip of less than two seconds
is needed to fit within the 1 Mb maximum GIF size, and that isn't
enough to show any real action.  We're going to have to rely on the
YouTube video for people who want to see it in action.

Created first cut at a Marketplace listing and product directory tree.

For some screwball reason, the colour for the bottom of the Millennium
Falcon texture had been set to light grey, which caused a shaded square
to appear even though the border was transparent.  I changed it to
white and now the border is clear.

After I fixed the Millennium Falcon texture, when Firestorm showed it
at reduced resolution, it was still using the shaded texture.  Editing
the object while it was doing this and doing nothing (simply opening
and closing the editor) fixed it.  I suppose it had an old image in its
cache which opening the editor forced it to flush.

2022 October 8

The recommended video settings for YouTube HD uploads are:
    1280x720    (16:9)
    Container:  MP4
    Audio codec: AAC-LC
    Video codec: H.264
    Progressive scan

Made raw captures for the YouTube video and imported them into a
working first cut in OpenShot.  Cuts, transitions, titles, captions,
and sound track have yet to be done.

2022 October 9

Integrated the flRezPermitted() function from Gridmark's
test_rezscript.lsl and used it to check whether we're allowed to rez
objects at the current location when enabling Set path lines.  If not,
we issue a message and ignore the command, which is a lot better than a
script pop-up message in the viewer.

After more experimentation with the problem of a second Run on command
failing after a Run off while the butterfly was attached to an avatar,
evidence pointed toward the sequence we do for Run off, which consists
of a llMoveToTarget() back to the starting point of the run, followed
by a quarter second llSleep() to allow the avatar to arrive there and
then an llStopMoveToTarget(), without which the avatar would remain
frozen in place.  My theory was that if the llMoveToTarget has not yet
completed when the StopMove is executed, something: simulator or
viewer, gets confused and causes subsequent llMoveToTarget() calls from
the next Run to be ignored.  The fact that the failure was not
repeatable provided evidence of a timing problem.

By experimentation, I found that introducing a 1.5 second delay before
the llStopMoveToTarget() instead of the 0.25 second before completely
eliminates the failure.  If this proves insufficient (for example in
heavily loaded simulations), I may have to introduce something using
the llTarget() function and the at_target() event to detect when the
final llMoveToTarget has completed before stopping the move to target.

Implemented the Reset command, which I'd not gotten around to before.
This will be very handy in the Demonstration script, which now has to
be extra careful to explicitly reset things it changed in specific
demonstrations before the next one.

Made the "Set trace" setting bit-coded.  Set to the sum of the following:
    1   General trace, including script and menu processors
    2   Critical point and scale factor computation
    4   Orientation vectors for model
    8   Make orientation vectors permanent

2022 October 10

I decided there's no reason to add the flRezPermitted() check for the
ability to rez objects to the Deployer because if it wasn't able to rez
objects, you wouldn't have been able to rez it in the first place.
Sure, you could wear it and try rezzing on land where you're not
permitted, but anybody who goes to that much trouble to get a
permissions pop-up deserves to see it.

Commented out the code for the orientation trace plot generation
enabled by Set trace bits 4 and 8.  This saves a bit of script memory
(we're at 84% now) and nobody but a crazed developer chasing a model
rotation problem would need to enable it.

When the butterfly was worn as an avatar attachment, the trajectories
plotted in region space were rotated 90 degrees with respect to those
drawn by a butterfly rezzed in the region.  This was due to
lorenz2Region() composing a rotation to correct for the rotation to
align the local Z axis with the region X axis of the rezzed butterfly.
I added code to skip composing this rotation when the butterfly is worn
as an attachment.

Developed a streamlined sensitive dependence experiment.
    Rez "Sensitive Dependence Experiment" from inventory.
        This creates two butterflies in exactly the same position, one
        listening on /4001 that starts flying at 20% of the way between
        the critical points and a second listening on /4002 that starts
        at 20.000002%, a difference of 100 parts per billion in initial
        conditions.
    /4002 channel 4001
        This sets the second butterfly to also listen to channel 4001,
        so both will respond to commands on that channel.
    /4001 run on
        Both butterflies start flying, apparently in lockstep.  But the
        tiny difference in their initial positions is being amplified by
        the chaotic Lorenz system as they fly, and around 100 seconds
        into the run you'll see their paths begin to visibly diverge.
        Shortly thereafter, they'll be following completely different
        trajectories, often orbiting different critical points.
    /4001 run off
    /4001 boot
        Stop the run and reboot the two butterflies.  They will resume
        listening on channels 4001 and 4002.
    /4002 set start 20
        Change the starting position of butterfly 2 to 20%, precisely
        the same as butterfly 1.
    /4002 channel 4001
        Reset butterfly 2 to listen to the same channel as butterfly 1.
    /4001 run on
        Start the butterflies flying again.  This time, having
        eliminated the 100 parts per billion difference in initial
        conditions, they will track perfectly, as the evolution of the
        Lorenz system is deterministic.  After a while, you may notice
        that one butterfly is getting a little ahead of the other along
        their trajectory.  This is due to the Second Life simulator not
        updating these two independent objects at precisely the same
        rate.  But you will notice they are following exactly the same
        trajectory because their starting points were identical.  I
        have let this run overnight, and the two butterflies never
        diverged onto radically different trajectories.
    /4001 run off
    /4001 boot
        This concludes the experiment.  You may now, if you wish,
        continue the experiment at the step above where we set the
        starting position of /4002 and try different starting positions
        or changes in other parameters such as beta, rho, or sigma.
        Bear in mind that floating point computation in Second Life is
        single-precision only, which has around 7.2 significant digits,
        so changes smaller than the 100 parts per billion used in the
        example may not make any difference.
The above appears in a new notecard, notecards/sensitive_dependence.nc
which is included in the Sensitive Dependence folder of the product.

The RIBBON particle system mask item was infelicitous when the
butterfly was attached to an avatar because limitations in what we
can make the avatar do from an attachment preclude aligning the Z
axis of the butterfly with the direction of travel.  I added code to
drawPaths() to select the ribbon when we are not attached and smaller
dots when we are.

2022 October 11

Ran an experiment to see what would happen if an avatar wearing the
butterfly and flying teleported while flying.  After arrival, they are
no longer flying but the butterfly thinks it's in Run on mode. You have
to Run off and then Run on again to resume flying.  This can probably
be fixed by detecting the changed() region event and forcing a Run off
if we're running.  You also get CHANGED_REGION when crossing a region
boundary by simply moving, so I need to see what that does with Run
mode as well.

Logged on to github.com.

Created a new repository:
    chaos_butterfly
with access URLs:
    HTTPS: https://github.com/Fourmilab/chaos_butterfly.git
    SSH:   git@github.com:Fourmilab/chaos_butterfly.git

Linked the local repository to the GitHub archive:
    git remote add origin git@github.com:Fourmilab/chaos_butterfly.git

Confirmed that my local "git sync" command works with the remote
repository.

2022 October 13

Music for the YouTube video:

            music1.ogg
––––––––––––––––––––––––––––––
Fly away by Rexlambo https://soundcloud.com/rexlambo
Creative Commons — Attribution 3.0 Unported — CC BY 3.0
Free Download / Stream: http://bit.ly/l-fly-away
Music promoted by Audio Library https://youtu.be/wbO_JnJTo_Q
––––––––––––––––––––––––––––––

––––––––––––––––––––––––––––––
Butterfly by Hunter Milo https://soundcloud.com/huntermilo
Creative Commons — Attribution 3.0 Unported — CC BY 3.0
Free Download / Stream:  https://bit.ly/3RJG2rz
Music promoted by Audio Library https://youtu.be/20r5bdJOZsI
––––––––––––––––––––––––––––––

            music2.ogg
––––––––––––––––––––––––––––––
Track: Infinity — Declan DP [Audio Library Release]
Music provided by Audio Library Plus
Watch: https://youtu.be/QV-5aZhWo5w
Free Download / Stream: https://alplus.io/infinity
––––––––––––––––––––––––––––––

            music3.ogg
––––––––––––––––––––––––––––––
Track: Back to 1981 — Iaio [Audio Library Release]
Music provided by Audio Library Plus
Watch: https://youtu.be/3MVRIfyWlnA
Free Download / Stream: https://alplus.io/back-1981
––––––––––––––––––––––––––––––

            music4.ogg
––––––––––––––––––––––––––––––
Track: Altitude — Declan DP [Audio Library Release]
Music provided by Audio Library Plus
Watch: https://youtu.be/sKqpyBn7jCM
Free Download / Stream: https://alplus.io/altitude
––––––––––––––––––––––––––––––

            music5.ogg
––––––––––––––––––––––––––––––
Skydancer by Scandinavianz https://soundcloud.com/scandinavianz
Creative Commons — Attribution 3.0 Unported — CC BY 3.0
Free Download / Stream: https://bit.ly/_skydancer
Music promoted by Audio Library https://youtu.be/Kp-eibuQpWg
––––––––––––––––––––––––––––––

2022 October 14

After any number of false starts due to problems with video clip
transitions, posted the demonstration video to YouTube:
    https://www.youtube.com/watch?v=bKa171nw3eA

Added the video link to the User Guide notecard.

Added the video link to the README.md for GitHub.

Added the video link to the Second Life Marketplace listing:
    https://marketplace.secondlife.com/p/Fourmilab-Chaos-Butterfly/24053377

2022 October 16

Removed the debug code that set the command channel to 1011 when rezzed
by the Deployer and replaced it with the production code that sets the
channel to the current commandChannel + 1000, or 2963 when using the
default channel.  This required a corresponding change in the Deployer
so that it sends its flight termination messages to the butterflies on
that channel.

Removed the debug code that set the command channel to 111 when
attached to an avatar.  We now use the standard commandChannel (default
1963) regardless of whether we're rezzed from inventory or attached.

Made a special butterfly for the Deployer in which the Configuration
script is deleted.  This keeps butterflies it deploys from blithering
the welcome message, which would give the incorrect number for the
chat communication channel.

Here is the dependency tree for rebuilding the Chaos Butterfly
Marketplace distribution from scratch.  It may be used as a checklist
when preparing new releases.

    Fourmilab Chaos Butterfly
        user-guide.nc (Fourmilab Chaos Butterfly User Guide)
        flPlotLine, flPlotLine Permanent
            flPlotLine.lsl
        Textures (butterfly*, etc.)
        Line Plotter *
            line_plotter.lsl
        Scripts
            lorenz.lsl (Lorenz Butterfly)
            menu_processor.lsl (Menu Processor)
            script_processor.lsl (Script Processor)
        Notecard Scripts
            script_commander.lsl (Script: Commander)
            script_configuration.lsl (Script: Configuration)
            script_demonstration.lsl (Script: Demonstration)

        Fourmilab Chaos Butterfly Deployer
            deployer.lsl (Butterfly Deployer)
            Fourmilab Chaos Butterfly
                This is the butterfly object build above, but modified
                to delete the "Script: Configuration".  This keeps
                deployed butterflies from cluttering chat and citing
                the wrong chat channel.

    user-guide.nc (Fourmilab Chaos Butterfly User Guide)
        Separate copy of User Guide in Marketplace top folder

    Sensitive Dependence Experiment
        sensitive_dependence.nc (Sensitive Dependence Experiment Instructions)
        Sensitive Dependence Experiment (composite object consisting of)
            Sensitive Dependence Experiment
                configuration_4001.nc (Script: Configuration)
            Fourmilab Chaos Butterfly /4002
                configuration_4002.nc (Script: Configuration)
            These two objects are aligned to precisely the same point
            and taken into inventory together with the name of the
            first.
    Development Kit
        Logs
            log.txt (Development Log)
        Textures
            All textures in the butterfly from PNG files in the
            texture directory.

Synchronised all notecard scripts in the Butterfly with those in the
Git repository.  Installed new notecards in the standard butterfly:
    Script: Configuration /4001
    Script: Configuration /4002
which can simply be renamed to the active configuration script when
installing in the Sensitive Dependence experiment object.

Confirmed that the flPlotLine and flPlotLine Permanent objects in the
butterfly both contain the identical flPlotLine.lsl script from the Git
repository.

Confirmed that the following LSL scripts in the butterfly are identical
to those in the Git repository.  I give the name in the inventory and
repository name in parentheses.
    Lorenz Butterfly        (lorenz.lsl)
    Menu Processor          (menu_processor.lsl)
    Script Processor        (script_processor.lsl)
    Line Plotter *          (line_plotter.lsl)

Updated the Fourmilab Chaos Butterfly User Guide in the butterfly to
the newer version in the Git repository.

This completes verification of the Butterfly model and all its
components.  Took a copy into Inventory and saved in the Projects
directory and Marketplace folder.

Placed the current copy of the Fourmilab Chaos Butterfly User Guide in
the Marketplace folder.

Updated deployer/scripts/deployer.lsl in the Git repository to the
version in the object which uses the new chat channel of 2963 used
by butterflies created by the Deployer.

Updated the butterfly model in the Deployer's inventory to the one just
built above.

This completes verification of the Deployer.  Took a copy of the
Deployer into inventory and stored in the Projects folder and the
Marketplace listing.

Deleted the old separate Deployer folder in the Projects directory.
The Deployer is now a top-level item.

Verified that Notecards in the Projects directory agree with those in
the butterfly model.  Added the configuration notecards for the /4001
and /4002 butterflies for Sensitive Dependence to the Projects folder.

Updated flPlotLine and flPlotLine Permanent in the Projects folder to
be identical to those in the butterfly.

2022 October 17

Rebuilt the Sensitive Dependence Experiment composite object using the
latest version of the butterfly object, tested, and installed in the
Projects directory and the Marketplace/Sensitive Dependence Experiment
folder.

Installed this log file in the Marketplace Development Kit/Logs folder
and the Projects folder.

Marketplace release v1.0.
